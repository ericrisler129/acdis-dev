<?php

/**
 * @file
 * Install functions for the Election module.
 */

require_once 'includes/election.constants.inc';

/**
 * Implements hook_schema().
 */
function election_schema() {

  $schema = array();

  $schema['election'] = array(
    'description' => 'The main table for the election module.',
    'fields' => array(
      'election_id' => array(
        'description' => 'Primary key: identifier for an election.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of the election (machine name).',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The title of the election - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the election\'s owner/creator. NULL means the user has been deleted.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'published' => array(
        'description' => 'Allows view access to all those with the "view published elections" permission.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'vstatus' => array(
        'description' => sprintf(
          'The voting status: open %d, closed %d, or scheduled %d.',
          ELECTION_STATUS_OPEN,
          ELECTION_STATUS_CLOSED,
          ELECTION_STATUS_SCHEDULED
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_STATUS_CLOSED,
      ),
      'vopen_time' => array(
        'description' => 'The Unix timestamp for when voting opens (if scheduled). NULL means it is not scheduled.',
        'type' => 'int',
      ),
      'vclose_time' => array(
        'description' => 'The Unix timestamp for when voting closes (if scheduled). NULL means it is not scheduled.',
        'type' => 'int',
      ),
      'nstatus' => array(
        'description' => sprintf(
          'The nominations status: open %d, closed %d, or scheduled %d.',
          ELECTION_STATUS_OPEN,
          ELECTION_STATUS_CLOSED,
          ELECTION_STATUS_SCHEDULED
        ),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => ELECTION_STATUS_CLOSED,
      ),
      'nopen_time' => array(
        'description' => 'The Unix timestamp for when nominations open (if scheduled). NULL means it is not scheduled.',
        'type' => 'int',
      ),
      'nclose_time' => array(
        'description' => 'The Unix timestamp for when nominations close (if scheduled). NULL means it is not scheduled.',
        'type' => 'int',
      ),
      'settings' => array(
        'description' => 'A serialized array of any further settings for this election. NULL means there are no further settings.',
        'type' => 'blob',
        'size' => 'normal',
        'serialize' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp for when the election was created.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp for when the election was most recently changed.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('election_id'),
    'indexes' => array(
      'type' => array('type'),
      'uid' => array('uid'),
      'published' => array('published'),
      'vstatus' => array('vstatus'),
      'nstatus' => array('nstatus'),
      'vperiod' => array('vopen_time', 'vclose_time'),
      'nperiod' => array('nopen_time', 'nclose_time'),
      'created' => array('created'),
      'title' => array('title'),
    ),
  );

  return $schema;

}

/**
 * Implements hook_uninstall().
 */
function election_uninstall() {
  drupal_load('module', 'election');
  foreach (array_keys(election_types()) as $bundle) {
    field_attach_delete_bundle('election', $bundle);
  }
}

/**
 * Add the 'published' column to the election table.
 */
function election_update_7101() {
  db_add_field('election', 'published', array(
    'description' => 'Allows view access to all those with the "view published elections" permission.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_index('election', 'published', array('published'));

  // Publish all existing elections (they used to be published anyway).
  db_update('election')
    ->fields(array('published' => 1))
    ->execute();

  // Rename 'view any election' permission to 'view published elections'.
  db_update('role_permission')
    ->fields(array('permission' => 'view published elections'))
    ->condition('permission', 'view any election')
    ->execute();

}

/**
 * Update existing posts with new bundle names.
 */
function election_update_7102() {
  drupal_static_reset('election_types');
  foreach (election_types() as $type_machine_name => $type) {
    $post_ids = db_query('SELECT post_id FROM {election_post} ep LEFT JOIN {election} e USING (election_id) WHERE e.type = :type', array(':type' => $type_machine_name))->fetchCol();
    if (!empty($post_ids)) {
      db_update('election_post')
        ->fields(array('type' => $type['post machine name']))
        ->condition('post_id', $post_ids, 'IN')
        ->execute();
    }
  }
}

/**
 * Rename election_post bundles for default election types.
 */
function election_update_7103() {
  field_attach_rename_bundle('election_post', 'motion', 'referendum_post');
  field_attach_rename_bundle('election_post', 'position', 'stv_post');
}

/**
 * Add 'settings' field.
 */
function election_update_7104() {
  if (db_field_exists('election', 'settings')) {
    return;
  }
  db_add_field('election', 'settings', array(
    'description' => 'A serialized array of any further settings for this election.',
    'type' => 'blob',
    'size' => 'normal',
    'serialize' => TRUE,
  ));
}

/**
 * Rebuild the registry to account for moved classes.
 */
function election_update_7105() {
  registry_rebuild();
}

/**
 * Make certain columns NOT NULL.
 */
function election_update_7106() {
  db_drop_index('election', 'title');
  db_change_field('election', 'title', 'title', array(
    'description' => 'The title of the election - a human-readable identifier.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ), array('indexes' => array('title' => array('title'))));

  db_change_field('election', 'changed', 'changed', array(
    'description' => 'The Unix timestamp for when the election was most recently changed.',
    'type' => 'int',
    'not null' => TRUE,
  ));
}

/**
 * Remove unneccessary default values from database schema.
 */
function election_update_7107() {
  db_drop_index('election', 'created');
  db_change_field('election', 'created', 'created', array(
    'description' => 'The Unix timestamp for when the election was created.',
    'type' => 'int',
    'not null' => TRUE,
  ), array('indexes' => array('created' => array('created'))));
}
