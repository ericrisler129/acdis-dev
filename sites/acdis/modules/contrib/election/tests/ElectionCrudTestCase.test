<?php

/**
 * Test the Election module for basic CRUD functionality.
 */
class ElectionCrudTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Election CRUD',
      'description' => 'A basic CRUD (Create, Read, Update, Delete) test for the Election module.',
      'group' => 'Election',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $modules = array(
      'election_fptp',
      'election_referendum',
      'election_stv',
      'election_test',
      'election_cron',
    );
    parent::setUp($modules);
  }

  /**
   * Create, update, and delete an election.
   */
  public function testElectionCrud() {
    // Create a user who has the appropriate permissions for this test.
    $test_user = $this->drupalCreateUser(array(
      'create elections',
      'view published elections',
      'edit own elections',
      'delete own elections',
    ));
    // Log in as that user.
    $this->drupalLogin($test_user);

    // Test that the main elections list exists.
    $this->drupalGet('elections');
    $this->assertResponse(200, t('The page at /elections exists.'));

    // Test CRUD for all election types.
    foreach (election_types() as $bundle => $type) {
      // Check that the "Add new" link exists for each bundle.
      $this->assertLink(t('Add new !post_name', array('!post_name' => $type['name'])));

      // Test the election edit page.
      $this->drupalGet('elections/add/' . $bundle);
      $this->assertFieldByXPath("//input[@id='edit-title'][@maxlength='255']", NULL, 'Title field has @maxlength of 255.');

      // Create a new election with a random title.
      $election = $this->helperElectionCreateUi($bundle, $this->randomString(255));
      // Update the election's title and published status.
      $election = $this->helperElectionUpdateUi($election, array(
        'title' => $this->randomString(),
        'published' => 1,
      ));

      // Test message displayed when scheduled dates are in the past.
      // Nominations dates.
      if (!empty($election->type_info['has candidates'])) {
        $election = $this->helperElectionUpdateUi($election, array(
          'nstatus' => 0,
          'nopen_time[date]' => REQUEST_TIME - 4000,
          'nclose_time[date]' => REQUEST_TIME - 3000,
        ));
        $this->assertText('Nominations schedule Opening time is in the past.');
        $this->assertText('Nominations schedule Closing time is in the past.');
      }
      // Voting dates.
      $election = $this->helperElectionUpdateUi($election, array(
        'vstatus' => 0,
        'vopen_time[date]' => REQUEST_TIME - 2000,
        'vclose_time[date]' => REQUEST_TIME - 1000,
      ));
      $this->assertText('Voting schedule Opening time is in the past.');
      $this->assertText('Voting schedule Closing time is in the past.');

      // Nomination open/close hooks.
      // Hook implementations in the election_test module save values into
      // variable election_test which are tested by the assertions below.
      $test_string = $this->randomString();

      // Set election_cron_last before the nominations are scheduled to open.
      // Since all opens and closes are in the past, all four hooks should fire
      // when election_cron_cron() is manually run.
      variable_set('election_test', $test_string);
      variable_set('election_cron_last', REQUEST_TIME - 5000);
      election_cron_cron();
      $this_test = $test_string;
      // Do not test nominations for elections types without condidates.
      if (!empty($election->type_info['has candidates'])) {
        $this_test .= ' election_test_election_nominations_open ' . $election->election_id . '-' . TRUE . ' election_test_election_nominations_close ' . $election->election_id . '-' . TRUE;
      }
      $this_test .= ' election_test_election_voting_open ' . $election->election_id . '-' . TRUE . ' election_test_election_voting_close ' . $election->election_id . '-' . TRUE;
      $this->assertIdentical(variable_get('election_test'), $this_test, 'hook_election_(nominations|voting)_(open|close)() fire when election_cron_cron() runs.');
      variable_del('election_cron_last');

      // Test voting first so that it ends with voting closed, ready to test
      // nominations without errors relating to voting being scheduled.
      foreach (array('voting', 'nominations') as $stage) {
        if ($stage === 'nominations' && empty($election->type_info['has candidates'])) {
          $this->pass('Not testing nominations for an election type without condidates');
          continue;
        }

        $stage_prefix = substr($stage, 0, 1);

        variable_set('election_test', $test_string);
        $election = $this->helperElectionUpdateUi($election, array(
          $stage_prefix . 'close_time[date]' => REQUEST_TIME + 1000,
        ));
        $this->assertIdentical(variable_get('election_test'), $test_string . ' election_test_election_' . $stage . '_open ' . $election->election_id . '-' . FALSE, 'hook_election_' . $stage . '_open() fired when close scheduled for future.');

        variable_set('election_test', $test_string);
        $election = $this->helperElectionUpdateUi($election, array(
          $stage_prefix . 'close_time[date]' => REQUEST_TIME - 1000,
        ));
        $this->assertIdentical(variable_get('election_test'), $test_string . ' election_test_election_' . $stage . '_close ' . $election->election_id . '-' . FALSE, 'hook_election_' . $stage . '_close() fired when close scheduled for past.');

        variable_set('election_test', $test_string);
        $election = $this->helperElectionUpdateUi($election, array(
          $stage_prefix . 'status' => ELECTION_STATUS_OPEN,
        ));
        $this->assertIdentical(variable_get('election_test'), $test_string . ' election_test_election_' . $stage . '_open ' . $election->election_id . '-' . FALSE, 'hook_election_' . $stage . '_open() fired when explicitly opened.');

        variable_set('election_test', $test_string);
        $election = $this->helperElectionUpdateUi($election, array(
          $stage_prefix . 'status' => ELECTION_STATUS_CLOSED,
        ));
        $this->assertIdentical(variable_get('election_test'), $test_string . ' election_test_election_' . $stage . '_close ' . $election->election_id . '-' . FALSE, 'hook_election_' . $stage . '_close() fired when explicitly closed.');
      }
      variable_del('election_test');

      // Delete the election.
      $this->helperElectionDeleteUi($election);
    }
  }

  /**
   * Test creating a new election via the UI.
   */
  protected function helperElectionCreateUi($bundle, $title, array $properties = array()) {
    $properties['title'] = $title;
    $this->drupalPost('elections/add/' . $bundle, $properties, t('Save'));
    $types = election_types();
    $type = $types[$bundle];
    // The page should display that the new election was saved.
    $this->assertRaw(
      t('The @type %title was saved.', array('@type' => $type['name'], '%title' => $title)),
      t('Election of type %type added correctly.', array('%type' => $type['name']))
    );
    // Load the newly created election by its title.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'election')
      ->propertyCondition('title', $title);
    $result = $query->execute();
    $election_ids = array_keys($result['election']);
    $election_id = reset($election_ids);
    $election = election_load($election_id);
    // Check that the new election has the correct properties.
    $this->assertEqual($election->type, $bundle, t('Election has the correct type.'));
    foreach ($properties as $name => $value) {
      $this->assertEqual($election->$name, $value, t('Election property %name is correct.', array('%name' => $name)));
    }
    return $election;
  }

  /**
   * Test updating an existing election via the UI.
   */
  protected function helperElectionUpdateUi(stdClass $election, array $edit) {
    $date_format = variable_get('date_format_short', 'Y-m-d H:i');
    foreach ($edit as $key => $value) {
      if (preg_match('/\[date\]$/', $key)) {
        $edit[$key] = date($date_format, $value);
      }
    }
    $this->drupalPost(election_uri_path($election) . '/edit', $edit, t('Save'));
    // The page should display that the election was saved.
    // The (possibly updated) title is needed to test this assertion.
    $new_title = $election->title;
    if (isset($edit['title'])) {
      $new_title = $edit['title'];
    }
    $this->assertRaw(
      t('The @type %title was saved.', array('@type' => $election->type_info['name'], '%title' => $new_title)),
      t('Election updated correctly.')
    );
    // Load the election from the database again.
    $original = $election;
    $election = election_load($original->election_id, TRUE);
    // Check that the new election has the correct properties.
    foreach ($edit as $name => $value) {
      if (preg_match('/^(.+)\[date\]$/', $name, $backref)) {
        $name = $backref[1];
        $election_value = date($date_format, $election->$name);
      }
      else {
        $election_value = $election->$name;
      }
      $this->assertEqual($election_value, $value, t('Updated election property %name is correct.', array('%name' => $name)));
    }
    return $election;
  }

  /**
   * Test deleting an existing election via the UI.
   */
  protected function helperElectionDeleteUi(stdClass $election) {
    $this->drupalPost(election_uri_path($election) . '/delete', array(), t('Delete'));
    // The page should display that the election was deleted.
    $this->assertRaw(
      t('The @type %title has been deleted.', array('@type' => $election->type_info['name'], '%title' => $election->title)),
      t('Election deleted successfully.')
    );
    // Test that the user was redirected to an existing page after deleting.
    $this->assertResponse(200, t('Redirected to an existent page after deleting.'));
  }

}
