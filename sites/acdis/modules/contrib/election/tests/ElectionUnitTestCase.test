<?php

/**
 * Unit tests for the basic functionality of Election.
 */
class ElectionUnitTestCase extends DrupalUnitTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Election unit tests',
      'description' => 'Unit tests for the Election module',
      'group' => 'Election',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    // Include necessary files.
    $election_path = drupal_get_path('module', 'election');
    require_once $election_path . '/election.module';
  }

  /**
   * Test the function _election_is_open().
   */
  public function testElectionIsOpen() {
    $result = _election_is_open(ELECTION_STATUS_CLOSED, NULL, NULL);
    $this->assertFalse($result, 'A closed status with no open/close times should return FALSE.', 'Unit');
    $result = _election_is_open(ELECTION_STATUS_CLOSED, strtotime('-10 days'), strtotime('-5 days'));
    $this->assertFalse($result, 'A closed status with provided open/close times should return FALSE.', 'Unit');
    $result = _election_is_open(ELECTION_STATUS_OPEN, NULL, NULL);
    $this->assertTrue($result, 'An open status with no open/close times should return TRUE.', 'Unit');
    $result = _election_is_open(ELECTION_STATUS_OPEN, strtotime('+5 days'), strtotime('+10 days'));
    $this->assertTrue($result, 'An open status with provided open/close times should return TRUE.', 'Unit');
    $result = _election_is_open(ELECTION_STATUS_SCHEDULED, NULL, NULL);
    $this->assertFalse($result, 'A scheduled status with no open/close times should return FALSE.', 'Unit');
    $result = _election_is_open(ELECTION_STATUS_SCHEDULED, strtotime('-5 days'), strtotime('+1 day'));
    $this->assertTrue($result, 'A scheduled status inside open/close times should return TRUE.', 'Unit');
    $result = _election_is_open(ELECTION_STATUS_SCHEDULED, strtotime('-5 days'), strtotime('-1 day'));
    $this->assertFalse($result, 'A scheduled status outside open/close times should return FALSE.', 'Unit');
  }

  /**
   * Test the function _election_normalize_datetime().
   */
  public function test__election_normalize_datetime() {
    $this->assertIdentical(_election_normalize_datetime(10000.5), 10000, '_election_normalize_datetime() works for numeric input.', 'Unit');
    $this->assertIdentical(_election_normalize_datetime(array('date' => 'Nov 24, 2016', 'time' => '12:00')), strtotime('Nov 24, 2016 12:00'), '_election_normalize_datetime() works for array input with date and time.', 'Unit');
    $this->assertIdentical(_election_normalize_datetime(array('date' => 'Nov 24, 2016')), strtotime('Nov 24, 2016'), '_election_normalize_datetime() works for array input without time.', 'Unit');
    $this->assertIdentical(_election_normalize_datetime(array('time' => '12:00')), FALSE, '_election_normalize_datetime() works for array input without date.', 'Unit');
    $this->assertIdentical(_election_normalize_datetime(array('date' => '')), FALSE, '_election_normalize_datetime() works for array input with empty date.', 'Unit');
    $this->assertIdentical(_election_normalize_datetime(''), FALSE, '_election_normalize_datetime() works for empty string input.', 'Unit');
    $this->assertIdentical(_election_normalize_datetime('Nov 24, 2016'), strtotime('Nov 24, 2016'), '_election_normalize_datetime() works for non-empty string input.', 'Unit');
  }

}
