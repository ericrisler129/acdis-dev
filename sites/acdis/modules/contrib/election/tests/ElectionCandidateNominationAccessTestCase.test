<?php

/**
 * Test the Election Candidate module for access control for nominations.
 */
class ElectionCandidateNominationAccessTestCase extends ElectionCandidateAccessTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Candidate nominations access',
      'description' => 'Test access control for nominating candidates.',
      'group' => 'Election',
    );
  }

  /**
   * Test nominations access by permission.
   *
   * Test that nominations access is affected by the permission 'submit
   * nominations'.
   */
  public function testNominationsAccessByPermission() {
    // Create a published election of type 'stv', with open nominations.
    $election = $this->helperElectionCreate('stv', TRUE, NULL, ELECTION_STATUS_OPEN, NULL);
    // Create a published post in the election.
    $post = $this->helperElectionPostCreate($election, TRUE);

    // Create a user who is not allowed to submit nominations, and log in.
    $account = $this->drupalCreateUser(array(
      'view published elections',
    ));
    $this->drupalLogin($account);

    // Visit the nomination form and check that access is denied.
    $this->drupalGet('election-post/' . $post->post_id . '/nomination-form');
    $this->assertResponse(403, t('Access is denied to the nomination form for user %name', array(
      '%name' => $account->name,
    )));
    $this->drupalLogout();

    // Create a user who is allowed to submit nominations, and log in.
    $account = $this->drupalCreateUser(array(
      'view published elections',
      'submit nominations',
    ));
    $this->drupalLogin($account);

    // Visit the nomination form and check that access is granted.
    $this->drupalGet('election-post/' . $post->post_id . '/nomination-form');
    $this->assertResponse(200, t('Access is granted to the nomination form for user %name', array(
      '%name' => $account->name,
    )));
  }

  /**
   * Test that nominations access is affected by the nomination status.
   */
  public function testNominationsAccessByStatus() {
    // Create a published election of type 'stv', with open nominations.
    $election = $this->helperElectionCreate('stv', TRUE, NULL, ELECTION_STATUS_OPEN, NULL);
    // Create a published post in the election.
    $post = $this->helperElectionPostCreate($election, TRUE);
    $nominator_account = $this->drupalCreateUser(array(
      'view published elections',
      'submit nominations',
    ));
    $post_path = election_post_uri_path($post);
    $nomination_form_path = $post_path . '/nomination-form';

    // Log in as the nominator.
    $this->drupalLogin($nominator_account);

    // Check that a nomination link is shown on the post.
    $this->drupalGet($post_path);
    $this->assertText(t('Submit a nomination'), t('The nomination link is shown.'));

    // Visit the nomination form and check that access is granted.
    $this->drupalGet($nomination_form_path);
    $this->assertResponse(200, t('Access is granted to the nomination form when nominations are open.'));

    // Modify the election so that nominations are closed.
    $election->nstatus = ELECTION_STATUS_CLOSED;
    election_save($election);

    // Check that a nomination link is no longer shown on the post.
    $this->drupalGet($post_path);
    $this->assertNoText(t('Submit a nomination'), t('The nomination link is not shown.'));

    // Visit the nomination form and check that access is denied.
    $this->drupalGet($nomination_form_path);
    $this->assertResponse(403, t('Access is denied to the nomination form when nominations are closed.'));
  }

  /**
   * Test preventing duplicate nominations.
   *
   * Test that nominations access is denied to a user who has already submitted
   * a nomination.
   */
  public function testNominationsAccessPreventDuplicate() {
    // Create a published election of type 'stv', with open nominations.
    $election = $this->helperElectionCreate('stv', TRUE, NULL, ELECTION_STATUS_OPEN, NULL);
    // Create a published post in the election.
    $post = $this->helperElectionPostCreate($election, TRUE);
    $nominator_account = $this->drupalCreateUser(array(
      'view published elections',
      'submit nominations',
    ));
    $post_path = election_post_uri_path($post);
    $nomination_form_path = $post_path . '/nomination-form';

    // Check that access is granted for nomination.
    $this->assertTrue(
      election_candidate_nominate_access($post, $nominator_account),
      t('Access is allowed for nominating.')
    );

    // Log in as the nominator.
    $this->drupalLogin($nominator_account);

    // Submit a nomination.
    $fields = array(
      'candidate_name[' . LANGUAGE_NONE . '][0][given]' => $this->randomString(),
      'candidate_name[' . LANGUAGE_NONE . '][0][family]' => $this->randomString(),
      'candidate_mail[' . LANGUAGE_NONE . '][0][email]' => $this->randomName() . '@example.com',
    );
    $this->drupalPost($nomination_form_path, $fields, t('Submit nomination'));

    // Reset the static cache of previous nominations for the user.
    // @see election_candidate_get_nominations()
    drupal_static_reset('election_candidate_get_nominations');

    // Check that access is now denied for nomination.
    // @todo this probably shouldn't be the design but it is right now...
    $this->assertFalse(
      election_candidate_nominate_access($post, $nominator_account),
      t('Access is denied to nominating now that the user has already submitted a nomination.')
    );
  }

}
