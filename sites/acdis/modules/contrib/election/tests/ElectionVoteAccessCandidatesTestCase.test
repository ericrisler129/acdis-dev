<?php

/**
 * Test the Election Vote module for whether there are enough candidates.
 */
class ElectionVoteAccessCandidatesTestCase extends ElectionWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Election Vote access - for enough candidates',
      'description' => 'Test access control for voting based on whether there are enough candidates to vote for.',
      'group' => 'Election',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $modules = array(
      'election_fptp',
      'election_referendum',
      'election_stv',
    );
    parent::setUp($modules);
  }

  /**
   * Test access to vote is denied when there are not enough candidates.
   */
  public function testVoteAccessForEnoughCandidates() {
    // Create a published election of type STV, with open voting.
    $election = $this->helperElectionCreate('stv', TRUE, NULL, NULL, ELECTION_STATUS_OPEN);
    // Create a user account for a voter.
    $voter_account = $this->drupalCreateUser(array(
      'view published elections',
      'vote in elections',
    ));
    // Get the role ID belonging to the voter (for the role created via the
    // drupalCreateUser() call above).
    foreach ($voter_account->roles as $rid => $role_name) {
      if ($role_name != 'authenticated user') {
        $voter_rid = $rid;
        break;
      }
    }
    // Add a post, with the user's role.
    $post = entity_get_controller('election_post')->create(array(
      'type' => $election->type_info['post machine name'],
      'title' => $this->randomString(),
      'election_id' => $election->election_id,
      'rids' => array($voter_rid),
    ));
    election_post_save($post);
    // Reload the post so it gets processed correctly.
    $post = election_post_load($post->post_id, TRUE);

    // Log in as the voter.
    $this->drupalLogin($voter_account);

    // Check that there are not enough candidates for the post yet.
    $post_name = election_get_post_name($election->type);
    $this->assertFalse(
      election_candidate_post_has_enough($post),
      t('There are not enough candidates for the @post.', array('@post' => $post_name))
    );

    // Check that vote access is therefore denied for the voter.
    $this->drupalGet('election-post/' . $post->post_id);
    $this->assertText(t('Voting is currently closed (not enough candidates)'));

    // Since we're going to check access again for the same post and account (in
    // the same page request), clear the static cache of vote access checks.
    drupal_static_reset('election_vote_grants');

    // Create enough candidates for the post.
    $num_required = isset($post->vacancy_count) ? $post->vacancy_count + 1 : 2;
    for ($i = 1; $i <= $num_required; $i++) {
      $this->helperElectionCandidateCreate($post, TRUE);
    }

    // Check that there are now enough candidates for the post.
    $this->assertTrue(
      election_candidate_post_has_enough($post),
      t('There are enough candidates for the @post.', array('@post' => $post_name))
    );

    // Check that vote access is now allowed for the voter.
    $this->drupalGet('election-post/' . $post->post_id);
    $this->assertText(t('You can vote'));
  }

}
